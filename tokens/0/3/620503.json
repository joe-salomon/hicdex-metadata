{"__version": 1, "token_id": 620503, "symbol": "OBJKT", "name": "anticipation", "description": "/*\nanticipation\n\nHOLY FUCK! almost 1000 people follow me on twitter. to celebrate i am giving away up to 999 editions of this interactive token. i have decided to celebrate early bc fuck waiting. please take two - one for you and one to give to your irl or anon internet fren with no nfts.\n\n\tby thingticketNFT\n\t@thingticket\n\tcreated with hydra (https://hydra.ojack.xyz/) and p5.js (https://p5js.org/)\n\t\nthe following code is a template for p5 + hydra interactive (zipped html embedded) objkts on the hicetnunc platform and is the contents of the index.js file for this objkt. the code is not able to be run on the hydra website but i am including it here. the folder structure for this objkt is:\n\nholyFuck.zip\n-font/\n--BebasNeue-Regular.eot\n--BebasNeue-Regular.svg\n--BebasNeue-Regular.ttf\n--BebasNeue-Regular.woff\n--BebasNeue-Regular.woff2\n-index.html\n-index.js\n-hydra-synth.js\n-p5.js\n-style.css\n-holyFuck.gif\n\nhydra-synth.js and p5.js are open-source software available at the websites listed above. use developer tools (F12) to learn more about how this web page works.\n\nthe contents of index.html and notes on style.css are shown below this code. \n\na preview image is required for html embedded interactive objkts.\n\n*/\n\n\nspeed=1\n\nlet hydra, hydraCanvas;\nhydraCanvas = document.createElement(\"canvas\");\nhydraCanvas.width = window.innerWidth\nhydraCanvas.height = window.innerHeight\nhydraCanvas.id = \"hydraCanvas\";\nhydraCanvas.style.position = \"absolute\";\nhydraCanvas.style.zIndex = 2;\nhydraCanvas.style.top = 0;\nhydraCanvas.style.left = 0;\nhydraCanvas.getContext(\"webgl\", { preserveDrawingBuffer: false });\nhydra = new Hydra({\n  canvas: hydraCanvas,\n  detectAudio: false,\n  enableStreamCapture: false,\n\n});\n\ndocument.querySelector(\".placeholder\").appendChild(hydraCanvas)\n\n\nvar elt;\n\nconst sa = ( p ) => {\n\nlet x = 400;\nlet y = 400;\n  \n\tp.setup = () => {\n\tlet canvas = p.createCanvas(hydraCanvas.width, hydraCanvas.height);\n\n\t\telt = canvas.elt;\n\t\ts0.init({src: elt})\n\t\tcanvas.hide();\n\t\tp.textFont('Bebas Neue');\n\t\ttextArray = [\"HOLY FUCK!\"]\n\t\tp.textSize(letterSize)\n\t\n\t\tp.draw = () => {\n\t\t\tp.clear()\n\t\t\tp.strokeWeight(5);\n\t\t\tp.stroke(250,250,250);\n\t\t\tindex = Math.floor(time*6%textArray.length)\n\t\t\tp.fill(0,0,0)\n\t\t\tp.text( textArray[index], 0.5*hydraCanvas.width-letterSize*1.7, 0.55*hydraCanvas.height)\n\n\t\t}\n\t};\n};\n\nnew p5(sa);\n\nlet letterSize \nif (hydraCanvas.width <= hydraCanvas.height) {\nletterSize = .2*hydraCanvas.width;\n} else if (hydraCanvas.width > hydraCanvas.height) {\nletterSize = .2*hydraCanvas.height;\n} else {\nletterSize = \"not a valid option\"\n}\n\n\nsrc(o0)\n\t.layer(src(s0)\n\t\t.rotate( ()=> -0.1 +0.2*(mouse.x/hydraCanvas.width))\n\t\t)\n\t.scale(()=>.98+ 0.04*(mouse.y/hydraCanvas.height))\n\t.modulateScale(src(s0)\n\t\t.rotate( ()=> -0.1 +0.2*(mouse.x/hydraCanvas.width))\t\n\t\t)\n\t.rotate( ()=> -0.008 +mouse.x/30000,()=>-0.0015 +mouse.x/150000-0.001*Math.tan(Math.sin(Math.sin(time*.1))) )\n\t.modulateScale(osc(() => 30*Math.tan(Math.sin(Math.sin(0.01*time))),.05), .02)\n\n\t.out(o0)\n\n\n/* contents of index.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <title>anticipation</title>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, height=device-height\" />\n  <meta property=\"og:image\" content=\"holyFuck.gif\" />\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <script src=\"hydra-synth.js\"></script>\n  </head> \n  <body>\n  <div class=\"placeholder\"></div>\n    <script src=\"p5.js\"></script>\n    <script src=\"index.js\" defer></script>\n  </body>\n</html>\n\n*/\n\n/* notes on style.css\n\n// the following css seems critical but displays improperly in the sandbox fullscreen\nhtml, body {\n  \tmargin: 0px;\n\toverflow: hidden;\n}\n\n\ncanvas {\n\twidth: 100%;\n\theight: 100%;\n}\n\n//fonts are included. 'bebas neue' is used here. the easiest way to get the most out of cross browser functionality is to convert your chosen free font to all other formats needed for cross browser support. this includes importing the font as base 64. i have omitted the majority of the base 64 here for readability. i used the website https://transfonter.org/ with all output formats selected and base64 encode set to on. file path set to font/. the css (including base 64) is then included in a css file. copy and paste the font css below. \n\n@font-face {\n    font-family: 'Bebas Neue';\n    src: url('font/BebasNeue-Regular.eot');\n    font-weight: normal;\n    font-style: normal;\n}\n@font-face {\n    font-family: 'Bebas Neue';\n    src: url('data:font/woff2;charset=utf-8;base64,d09GMgABAAAAAFcoABIAA...\n    ...z3NgAAAA==') format('woff2'),\n        url('data:font/woff;charset=utf-8;base64,d09GRgABAAAAAHVAABIAAAA...\n    ...AAA2YWo8g==') format('woff'),\n        url('font/BebasNeue-Regular.ttf') format('truetype'),\n        url('font/BebasNeue-Regular.svg#BebasNeue-Regular') format('svg');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n*/", "artifact_uri": "ipfs://QmQLpcHV78dERy2ftRUBVjFYuieTLN18bJaPHEYUSHyKFy", "display_uri": "ipfs://Qmc3pPpm5gaacQDPRfiqaHJWHtL4rBVnbqaszTAz31PHJC", "thumbnail_uri": "ipfs://QmNrhZHUaEqxhyLfqoq1mtHSipkWHeT31LNHb1QEbDHgnc", "formats": [{"uri": "ipfs://QmQLpcHV78dERy2ftRUBVjFYuieTLN18bJaPHEYUSHyKFy", "mimeType": "application/x-directory"}], "creators": ["tz1dUJunwTwTanpzpUudkbprNGScbAZJawUn"], "tags": ["interactive", "wordart", "hydra", "p5", ""], "extra": {}}