{"__version": 1, "token_id": 532046, "symbol": "OBJKT", "name": "Interpolation From a Circle to an Equilateral Triangle (#13)", "description": "/*\n * \u25ef\u27f7\u25b3 \u2116.13\n * Interpolation From a Circle to an Equilateral Triangle (#13)\n * \"By linearly interpolating points on the circle towards \n * points on the triangle, along radii of the circle.\"\n * Page Thirteen of a 14-Page Pedagogical Sketchbook \n * By Golan Levin (@golan), 2017-2021.\n * \n * Animated GIF, 1024x1024, 720 frames @50fps, made with p5.js;\n * Presented October 25, 2017 on the Coding Train episode,\n * \"Guest Tutorial #7: Circle Morphing with Golan Levin\"\n * (https://www.youtube.com/watch?v=mvgcNOX8JGQ&t=1315s).\n * NFT created in 2021 for #Sketch4Processing, and minted by\n * KT1TaPfAuhmnyo6Le6zKe17opvFCsTxk1VN7 (golan_x_processingorg).\n * Per contract, 20% of all sales are donated to @ProcessingOrg.\n * \n * References: \n * - Joseph Choma, \"Morphing: A Guide to Mathematical\n *   Transformations for Architects and Designers\", 2015.\n * - Guus Craenen and Adrian H\u00e4ne, \"Fruit Salad\", 1970.\n * - CTG Japan (Masao Kohmura, Koji Fujino, Makoto Ohtake),\n *   \"Running Cola is Africa!\", 1968.\n * - Wassily Kandinsky, \"Point and Line to Plane\", 1926.\n * - William Kolomyjec, \"Banana Cone\", 1970-1975.\n * - J\u00fcrg Lehni and Wilm Thoben, \"Footnotes from the History\n *   of Two Cultures: Mitsuo Katsui\", 2015.\n * - Manfred Mohr, \"P-112 / Lady Quark\", 1972.\n * - Bruno Munari, \"Square Circle Triangle\", 1960-1976.\n * - Charles Philipon, \"Les Poires\", 1831.\n * - Troika, \"Squaring the Circle\"; \"Dark Matter\", 2013-2014.\n * - Wucius Wong, \"Principles of Two-Dimensional Design\", 1972.\n * - Yuki Yoshida, \"A Book of drawCircle()\", 2014.\n */\n\nvar nPoints;\nvar radius;\nvar cx, cy;\nvar trianglePoints = [];\nvar srcPoints = []; // points on the circle\nvar dstPoints = []; // points on the triangle\nvar bShowDebug = true;\nvar nFrames;\nvar backgrCol;\nvar strokeCol;\n\nfunction setup() {\n  createCanvas(1024, 1024);\n  pixelDensity(1);\n  frameRate(60);\n  \n  backgrCol = color(253,247,241);\n  strokeCol = color(24,14,6);\n\n  nFrames = 720; \n  nPoints = 180;\n  radius = width / 2 * 0.75;\n  cx = width / 2;\n  cy = height / 2;\n  \n  for (var i = 0; i < 3; i++) { // triangle vertices\n    var x = cx + radius * cos(0 + i * TWO_PI / 3.0 - HALF_PI);\n    var y = cy + radius * sin(0 + i * TWO_PI / 3.0 - HALF_PI);\n    trianglePoints[i] = {x,y};\n  }\n\n  // compute srcPoints: points on the circle\n  for (var j = 0; j < nPoints; j++) {\n    var t = map(j, 0, nPoints, 0, TWO_PI);\n    var x = cx + radius * cos(t - HALF_PI);\n    var y = cy + radius * sin(t - HALF_PI);\n    srcPoints[j] = {x,y};\n  }\n\n  // compute dstPoints: points along the triangle\n  for (var j = 0; j < nPoints; j++) {\n    var i = floor (j / (nPoints/3));\n    var p1x = trianglePoints[i].x;\n    var p1y = trianglePoints[i].y;\n    var p2x = trianglePoints[(i + 1) % 3].x;\n    var p2y = trianglePoints[(i + 1) % 3].y;\n\n    var p3x = cx;\n    var p3y = cy;\n    var p4x = srcPoints[j].x;\n    var p4y = srcPoints[j].y;\n\n    // see http://paulbourke.net/geometry/pointlineplane/ \n    var numea = (p4x - p3x) * (p1y - p3y) - (p4y - p3y) * (p1x - p3x);\n    var numeb = (p2x - p1x) * (p1y - p3y) - (p2y - p1y) * (p1x - p3x);\n    var denom = (p4y - p3y) * (p2x - p1x) - (p4x - p3x) * (p2y - p1y);\n    var ua = numea / denom;\n    var ub = numeb / denom;\n    var u = 1.0;\n    if ((ua >= 0) && (ua <= 1)) {\n      u = ua;\n    } else if ((ub >= 0) && (ub <= 1)) {\n      u = ub;\n    }\n    var x = p1x + u * (p2x - p1x);\n    var y = p1y + u * (p2y - p1y);\n    dstPoints[j] = {x,y};\n  }\n}\n\nfunction draw() {\n  background(backgrCol);\n  \n  var progress = (frameCount % nFrames) / nFrames;\n  var theta = progress * TWO_PI;\n  var t = pow(map(cos(theta), -1,1, 0,1), 1.5);\n  \n  noFill();\n  stroke(strokeCol);\n  strokeJoin(MITER); \n  strokeWeight(ceil(width * 0.01));\n  \n  beginShape();\n  for (var j = 0; j < nPoints; j++) {\n    var px = map(t, 0, 1, srcPoints[j].x, dstPoints[j].x);\n    var py = map(t, 0, 1, srcPoints[j].y, dstPoints[j].y);\n    vertex(px, py);\n  }\n  endShape(CLOSE);\n  \n  if (progress > 0.5) {\n    var alph = pow(sin(PI * (progress - 0.5)/0.5), 0.4);\n    stroke(24,14,6, 96 * alph);\n    strokeWeight(width / 1024.0);\n    for (var j = 0; j < nPoints; j+=5) {\n      line(srcPoints[j].x, srcPoints[j].y, dstPoints[j].x, dstPoints[j].y);\n    }\n  }\n}\n", "artifact_uri": "ipfs://bafybeigaysan2sncaxnoqfwpwnwswnio4dlxiutn4rksijoutujqr5av3y", "display_uri": "ipfs://bafybeigaysan2sncaxnoqfwpwnwswnio4dlxiutn4rksijoutujqr5av3y", "thumbnail_uri": "ipfs://QmNrhZHUaEqxhyLfqoq1mtHSipkWHeT31LNHb1QEbDHgnc", "formats": [{"uri": "ipfs://bafybeigaysan2sncaxnoqfwpwnwswnio4dlxiutn4rksijoutujqr5av3y", "mimeType": "image/gif"}], "creators": ["KT1TaPfAuhmnyo6Le6zKe17opvFCsTxk1VN7"], "tags": ["circle", "triangle", "shape", "interpolation", "metamorphosis", "morphing", "morph", "tween", "transformation", "transmutation", "lofting", "loop", "gif", "geometry", "creativecoding", "pedagogicalsketchbook", "series", "collabcontract", "sketch4processing", "sketchforprocessing", "Processing", "ProcessingOrg", "golan", "golanlevin"], "extra": {}}